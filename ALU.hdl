/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are
 * documented in the book. In addition, the ALU
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

CHIP ALU {
    IN x[16], y[16], zx, nx, zy, ny, f, no;
    OUT out[16], zr, ng;

    PARTS:  
    //activate
    Mux16(x=x, y=false, sel=zx, out=xz);
    Mux16(x=y, y=false, sel=zy, out=yz);
    Not16(x=xz, out=xn);
    Not16(x=yz, out=yn);
    Mux16(x=xz, y=xn, sel=nx, out=xlast);
    Mux16(x=yz, y=yn, sel=ny, out=ylast);

    //choosing function
    And16(x=xlast, y=ylast, out=temp1);
    Add16(x=xlast, y=ylast, out=temp2);
    Mux16(x=temp1, y=temp2, sel=f, out=fout);
    
    //negated output
    Not16(x=fout, out=negated);
    Mux16(x=fout, y=negated, sel=no, out[15]=ng, out[0..7]=first, out[8..15]=second, out=out);
    

    Or8Way(x=first, out=firstor);
    Or8Way(x=second, out=secondor);
    Or(x=firstor, y=secondor, out=zero);
    Not(x=zero, out=zr);
}
